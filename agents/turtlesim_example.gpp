string fluent loc(string arg) {
initially:
    ("a") = "";
    ("b") = "";
    ("c") = "";
}

action print_string(string text) {
mapping:
    "/print_string" {
        text = text
    }
}

bool fluent exog_state(){
initially:
        () = false;
}

exog_action exog_trigger(bool data) {
mapping:
    "/exog_event" {
        data = data
    }
effect:
    exog_state() = true;
}

number fluent delta_result() {
initially:
    () = 0.0;
}

string fluent string_response() {
initially:
    () = "";
}

string exog_function sense_string(string ros_action_name);

number exog_function sense_number(string ros_action_name);

action move_theta(number angle) {
senses:
    delta_result() = sense_number("/turtle1/rotate_absolute");
mapping:
    "/turtle1/rotate_absolute" {
        theta = angle
    }
}

action spawn_turtle(string name, string board_var_name) {
senses:
    string_response() = sense_string("/spawn");
mapping:
    "/spawn" {
        name = name,
        board_var_name = board_var_name
    }
}

action kill_turtle(string name) {
mapping:
    "/kill" {
        name = name
    }
}

action move_circle(number seconds) {
mapping:
    "move_circle" {
        seconds = seconds
    }
}

string fluent pose() {
initially:
    () = "";
}

action get_pose(string name, string board_var_name) {
mapping:
    "/get_turtle_pose" {
        name = name,
        board_var_name = board_var_name
    }
}

string fluent turtle1_pose() {
initially:
    () = "";
}

procedure main() {
    move_circle(4);

    test(exog_state());
    exog_state() = false;

    get_pose("turtle1", "{turtle1_pose}");
    kill_turtle("turtle1");
    spawn_turtle("turtle2", "{turtle1_pose}");

    test(exog_state());

    get_pose("turtle2", "{turtle2_pose}");
    kill_turtle("turtle2");
    spawn_turtle("turtle1", "{turtle2_pose}");
    move_circle(4);
}

/*
ros2 run turtlesim turtlesim_node
ros2 run gpp_action_examples move_circle_as.py
ros2 run gpp_action_examples turtle_pose_service.py
ros2 run gologpp_agent gologpp_agent
exog
*/